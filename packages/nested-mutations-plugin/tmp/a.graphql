type Child implements Node {
  """Reads a single `Parent` that is related to this `Child`."""
  dadParent: Parent
  dadParentId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Parent` that is related to this `Child`."""
  momParent: Parent
  momParentId: Int
  name: String!
  rowId: Int!

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudentsByStudentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolStudentConnection!

  """Reads and enables pagination through a set of `School`."""
  schoolsBySchoolStudentStudentIdAndSchoolId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildSchoolsBySchoolStudentStudentIdAndSchoolIdManyToManyConnection!

  """Reads and enables pagination through a set of `School`."""
  schoolsBySchoolStudentStudentIdAndSchoolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!]
  ): [School!]!
}

"""
A condition to be used against `Child` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s `dadParentId` field."""
  dadParentId: Int

  """Checks for equality with the object’s `momParentId` field."""
  momParentId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Child` values."""
type ChildConnection {
  """
  A list of edges which contains the `Child` and cursor to aid in pagination.
  """
  edges: [ChildEdge]!

  """A list of `Child` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Child` you could get from the connection."""
  totalCount: Int!
}

"""A `Child` edge in the connection."""
type ChildEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Child` at the end of the edge."""
  node: Child
}

"""An input for mutations affecting `Child`"""
input ChildInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested connector type for parentByMyDadParentId"""
  parentByMyDadParentId: ParentByMyDadParentIdInput

  """Nested connector type for parentByMyMomParentId"""
  parentByMyMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """Nested connector type for schoolStudentsByTheirStudentId"""
  schoolStudentsByTheirStudentId: SchoolStudentsByTheirStudentIdInput
}

"""Methods to use when ordering `Child`."""
enum ChildOrderBy {
  DAD_PARENT_ID_ASC
  DAD_PARENT_ID_DESC
  ID_ASC
  ID_DESC
  MOM_PARENT_ID_ASC
  MOM_PARENT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Child`. Fields that are set will be updated.
"""
input ChildPatch {
  dadParentId: Int
  momParentId: Int
  name: String

  """Nested connector type for parentByMyDadParentId"""
  parentByMyDadParentId: ParentByMyDadParentIdInput

  """Nested connector type for parentByMyMomParentId"""
  parentByMyMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """Nested connector type for schoolStudentsByTheirStudentId"""
  schoolStudentsByTheirStudentId: SchoolStudentsByTheirStudentIdInput
}

"""
A connection to a list of `School` values, with data from `SchoolStudent`.
"""
type ChildSchoolsBySchoolStudentStudentIdAndSchoolIdManyToManyConnection {
  """
  A list of edges which contains the `School`, info from the `SchoolStudent`, and the cursor to aid in pagination.
  """
  edges: [ChildSchoolsBySchoolStudentStudentIdAndSchoolIdManyToManyEdge!]!

  """A list of `School` objects."""
  nodes: [School]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `School` you could get from the connection."""
  totalCount: Int!
}

"""A `School` edge in the connection, with data from `SchoolStudent`."""
type ChildSchoolsBySchoolStudentStudentIdAndSchoolIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `School` at the end of the edge."""
  node: School

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudentsBySchoolId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolStudentConnection!

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudentsBySchoolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!]
  ): [SchoolStudent!]!
}

"""Relationship connect by node id for childrenByTheirDadParentId"""
input ChildrenByTheirDadParentIdConnectByNodeIdInput {
  """
  The node id input field to connect child in the childrenByTheirDadParentId relationship
  """
  id: ID!
}

"""The Child to be created by this mutation."""
input ChildrenByTheirDadParentIdCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested connector type for parentByMyDadParentId"""
  parentByMyDadParentId: ParentByMyDadParentIdInput

  """Nested connector type for parentByMyMomParentId"""
  parentByMyMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """Nested connector type for schoolStudentsByTheirStudentId"""
  schoolStudentsByTheirStudentId: SchoolStudentsByTheirStudentIdInput
}

"""Relationship input type for childrenByTheirDadParentId"""
input ChildrenByTheirDadParentIdInput {
  """Connect childrenByTheirDadParentId by node id"""
  connectByNodeId: [ChildrenByTheirDadParentIdConnectByNodeIdInput!]

  """A Child created and linked to this object"""
  create: [ChildrenByTheirDadParentIdCreateInput!]
}

"""Relationship connect by node id for childrenByTheirMomParentId"""
input ChildrenByTheirMomParentIdConnectByNodeIdInput {
  """
  The node id input field to connect child in the childrenByTheirMomParentId relationship
  """
  id: ID!
}

"""The Child to be created by this mutation."""
input ChildrenByTheirMomParentIdCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested connector type for parentByMyDadParentId"""
  parentByMyDadParentId: ParentByMyDadParentIdInput

  """Nested connector type for parentByMyMomParentId"""
  parentByMyMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """Nested connector type for schoolStudentsByTheirStudentId"""
  schoolStudentsByTheirStudentId: SchoolStudentsByTheirStudentIdInput
}

"""Relationship input type for childrenByTheirMomParentId"""
input ChildrenByTheirMomParentIdInput {
  """Connect childrenByTheirMomParentId by node id"""
  connectByNodeId: [ChildrenByTheirMomParentIdConnectByNodeIdInput!]

  """A Child created and linked to this object"""
  create: [ChildrenByTheirMomParentIdCreateInput!]
}

"""All input for the create `Child` mutation."""
input CreateChildInput {
  """The `Child` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Child` mutation."""
type CreateChildPayload {
  """The `Child` that was created by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Parent` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Parent` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create `Parent` mutation."""
type CreateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parent` that was created by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `School` mutation."""
input CreateSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `School` to be created by this mutation."""
  school: SchoolInput!
}

"""The output of our create `School` mutation."""
type CreateSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `School` that was created by this mutation."""
  school: School

  """An edge for our `School`. May be used by Relay 1."""
  schoolEdge(
    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""All input for the create `SchoolStudent` mutation."""
input CreateSchoolStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SchoolStudent` to be created by this mutation."""
  schoolStudent: SchoolStudentInput!
}

"""The output of our create `SchoolStudent` mutation."""
type CreateSchoolStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SchoolStudent` that was created by this mutation."""
  schoolStudent: SchoolStudent

  """An edge for our `SchoolStudent`. May be used by Relay 1."""
  schoolStudentEdge(
    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolStudentEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteChildById` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteChild` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Child` mutation."""
type DeleteChildPayload {
  """The `Child` that was deleted by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteParentById` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteParent` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Parent` mutation."""
type DeleteParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The `Parent` that was deleted by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSchoolById` mutation."""
input DeleteSchoolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `School` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSchool` mutation."""
input DeleteSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `School` mutation."""
type DeleteSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSchoolId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `School` that was deleted by this mutation."""
  school: School

  """An edge for our `School`. May be used by Relay 1."""
  schoolEdge(
    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""All input for the `deleteSchoolStudentById` mutation."""
input DeleteSchoolStudentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SchoolStudent` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSchoolStudent` mutation."""
input DeleteSchoolStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `SchoolStudent` mutation."""
type DeleteSchoolStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSchoolStudentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SchoolStudent` that was deleted by this mutation."""
  schoolStudent: SchoolStudent

  """An edge for our `SchoolStudent`. May be used by Relay 1."""
  schoolStudentEdge(
    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolStudentEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Child`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single `Parent`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Creates a single `School`."""
  createSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSchoolInput!
  ): CreateSchoolPayload

  """Creates a single `SchoolStudent`."""
  createSchoolStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSchoolStudentInput!
  ): CreateSchoolStudentPayload

  """Deletes a single `Child` using a unique key."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single `Child` using its globally unique id."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single `Parent` using a unique key."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single `Parent` using its globally unique id."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Deletes a single `School` using a unique key."""
  deleteSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolInput!
  ): DeleteSchoolPayload

  """Deletes a single `School` using its globally unique id."""
  deleteSchoolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolByIdInput!
  ): DeleteSchoolPayload

  """Deletes a single `SchoolStudent` using a unique key."""
  deleteSchoolStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolStudentInput!
  ): DeleteSchoolStudentPayload

  """Deletes a single `SchoolStudent` using its globally unique id."""
  deleteSchoolStudentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolStudentByIdInput!
  ): DeleteSchoolStudentPayload

  """Updates a single `Child` using a unique key and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single `Child` using its globally unique id and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """Updates a single `Parent` using a unique key and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single `Parent` using its globally unique id and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload

  """Updates a single `School` using a unique key and a patch."""
  updateSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolInput!
  ): UpdateSchoolPayload

  """Updates a single `School` using its globally unique id and a patch."""
  updateSchoolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolByIdInput!
  ): UpdateSchoolPayload

  """Updates a single `SchoolStudent` using a unique key and a patch."""
  updateSchoolStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolStudentInput!
  ): UpdateSchoolStudentPayload

  """
  Updates a single `SchoolStudent` using its globally unique id and a patch.
  """
  updateSchoolStudentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolStudentByIdInput!
  ): UpdateSchoolStudentPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  parentName: String!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildDadParentIdAndMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentParentsByChildDadParentIdAndMomParentIdManyToManyConnection!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildDadParentIdAndMomParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]
  ): [Parent!]!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildMomParentIdAndDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentParentsByChildMomParentIdAndDadParentIdManyToManyConnection!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildMomParentIdAndDadParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]
  ): [Parent!]!
  rowId: Int!
}

"""Relationship connect by node id for parentByMyDadParentId"""
input ParentByMyDadParentIdConnectByNodeIdInput {
  """
  The node id input field to connect parent in the parentByMyDadParentId relationship
  """
  id: ID!
}

"""The Parent to be created by this mutation."""
input ParentByMyDadParentIdCreateInput {
  """Nested connector type for childrenByTheirDadParentId"""
  childrenByTheirDadParentId: ChildrenByTheirDadParentIdInput

  """Nested connector type for childrenByTheirMomParentId"""
  childrenByTheirMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""Relationship input type for parentByMyDadParentId"""
input ParentByMyDadParentIdInput {
  """Connect parentByMyDadParentId by node id"""
  connectByNodeId: ParentByMyDadParentIdConnectByNodeIdInput

  """A Parent created and linked to this object"""
  create: ParentByMyDadParentIdCreateInput
}

"""Relationship connect by node id for parentByMyMomParentId"""
input ParentByMyMomParentIdConnectByNodeIdInput {
  """
  The node id input field to connect parent in the parentByMyMomParentId relationship
  """
  id: ID!
}

"""The Parent to be created by this mutation."""
input ParentByMyMomParentIdCreateInput {
  """Nested connector type for childrenByTheirDadParentId"""
  childrenByTheirDadParentId: ChildrenByTheirDadParentIdInput

  """Nested connector type for childrenByTheirMomParentId"""
  childrenByTheirMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""Relationship input type for parentByMyMomParentId"""
input ParentByMyMomParentIdInput {
  """Connect parentByMyMomParentId by node id"""
  connectByNodeId: ParentByMyMomParentIdConnectByNodeIdInput

  """A Parent created and linked to this object"""
  create: ParentByMyMomParentIdCreateInput
}

"""
A condition to be used against `Parent` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Parent` values."""
type ParentConnection {
  """
  A list of edges which contains the `Parent` and cursor to aid in pagination.
  """
  edges: [ParentEdge]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection."""
type ParentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""An input for mutations affecting `Parent`"""
input ParentInput {
  """Nested connector type for childrenByTheirDadParentId"""
  childrenByTheirDadParentId: ChildrenByTheirDadParentIdInput

  """Nested connector type for childrenByTheirMomParentId"""
  childrenByTheirMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""Methods to use when ordering `Parent`."""
enum ParentOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Parent` values, with data from `Child`."""
type ParentParentsByChildDadParentIdAndMomParentIdManyToManyConnection {
  """
  A list of edges which contains the `Parent`, info from the `Child`, and the cursor to aid in pagination.
  """
  edges: [ParentParentsByChildDadParentIdAndMomParentIdManyToManyEdge!]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection, with data from `Child`."""
type ParentParentsByChildDadParentIdAndMomParentIdManyToManyEdge {
  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]
  ): [Child!]!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""A connection to a list of `Parent` values, with data from `Child`."""
type ParentParentsByChildMomParentIdAndDadParentIdManyToManyConnection {
  """
  A list of edges which contains the `Parent`, info from the `Child`, and the cursor to aid in pagination.
  """
  edges: [ParentParentsByChildMomParentIdAndDadParentIdManyToManyEdge!]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection, with data from `Child`."""
type ParentParentsByChildMomParentIdAndDadParentIdManyToManyEdge {
  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]
  ): [Child!]!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""
Represents an update to a `Parent`. Fields that are set will be updated.
"""
input ParentPatch {
  """Nested connector type for childrenByTheirDadParentId"""
  childrenByTheirDadParentId: ChildrenByTheirDadParentIdInput

  """Nested connector type for childrenByTheirMomParentId"""
  childrenByTheirMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String
  rowId: Int
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Get a single `Child`."""
  child(rowId: Int!): Child

  """Reads a single `Child` using its globally unique `ID`."""
  childById(
    """The globally unique `ID` to be used in selecting a single `Child`."""
    id: ID!
  ): Child

  """Reads and enables pagination through a set of `Child`."""
  children(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Get a single `Parent`."""
  parent(rowId: Int!): Parent

  """Reads a single `Parent` using its globally unique `ID`."""
  parentById(
    """The globally unique `ID` to be used in selecting a single `Parent`."""
    id: ID!
  ): Parent

  """Reads and enables pagination through a set of `Parent`."""
  parents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `School`."""
  school(rowId: Int!): School

  """Reads a single `School` using its globally unique `ID`."""
  schoolById(
    """The globally unique `ID` to be used in selecting a single `School`."""
    id: ID!
  ): School

  """Get a single `SchoolStudent`."""
  schoolStudent(rowId: Int!): SchoolStudent

  """Reads a single `SchoolStudent` using its globally unique `ID`."""
  schoolStudentById(
    """
    The globally unique `ID` to be used in selecting a single `SchoolStudent`.
    """
    id: ID!
  ): SchoolStudent

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolStudentConnection

  """Reads and enables pagination through a set of `School`."""
  schools(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolConnection
}

type School implements Node {
  """Reads and enables pagination through a set of `Child`."""
  childrenBySchoolStudentSchoolIdAndStudentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolChildrenBySchoolStudentSchoolIdAndStudentIdManyToManyConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenBySchoolStudentSchoolIdAndStudentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]
  ): [Child!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  name: String!
  rowId: Int!

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolStudentConnection!
}

"""
A connection to a list of `Child` values, with data from `SchoolStudent`.
"""
type SchoolChildrenBySchoolStudentSchoolIdAndStudentIdManyToManyConnection {
  """
  A list of edges which contains the `Child`, info from the `SchoolStudent`, and the cursor to aid in pagination.
  """
  edges: [SchoolChildrenBySchoolStudentSchoolIdAndStudentIdManyToManyEdge!]!

  """A list of `Child` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Child` you could get from the connection."""
  totalCount: Int!
}

"""A `Child` edge in the connection, with data from `SchoolStudent`."""
type SchoolChildrenBySchoolStudentSchoolIdAndStudentIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Child` at the end of the edge."""
  node: Child

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudentsByStudentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolStudentConnection!

  """Reads and enables pagination through a set of `SchoolStudent`."""
  schoolStudentsByStudentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolStudentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!]
  ): [SchoolStudent!]!
}

"""
A condition to be used against `School` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SchoolCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `School` values."""
type SchoolConnection {
  """
  A list of edges which contains the `School` and cursor to aid in pagination.
  """
  edges: [SchoolEdge]!

  """A list of `School` objects."""
  nodes: [School]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `School` you could get from the connection."""
  totalCount: Int!
}

"""A `School` edge in the connection."""
type SchoolEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `School` at the end of the edge."""
  node: School
}

"""An input for mutations affecting `School`"""
input SchoolInput {
  name: String!
  rowId: Int

  """Nested connector type for schoolStudentsByTheirSchoolId"""
  schoolStudentsByTheirSchoolId: SchoolStudentsByTheirSchoolIdInput
}

"""Methods to use when ordering `School`."""
enum SchoolOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `School`. Fields that are set will be updated.
"""
input SchoolPatch {
  name: String
  rowId: Int

  """Nested connector type for schoolStudentsByTheirSchoolId"""
  schoolStudentsByTheirSchoolId: SchoolStudentsByTheirSchoolIdInput
}

type SchoolStudent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!

  """Reads a single `School` that is related to this `SchoolStudent`."""
  school: School
  schoolId: Int

  """Reads a single `Child` that is related to this `SchoolStudent`."""
  student: Child
  studentId: Int
}

"""
A condition to be used against `SchoolStudent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SchoolStudentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `schoolId` field."""
  schoolId: Int

  """Checks for equality with the object’s `studentId` field."""
  studentId: Int
}

"""A connection to a list of `SchoolStudent` values."""
type SchoolStudentConnection {
  """
  A list of edges which contains the `SchoolStudent` and cursor to aid in pagination.
  """
  edges: [SchoolStudentEdge]!

  """A list of `SchoolStudent` objects."""
  nodes: [SchoolStudent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SchoolStudent` you could get from the connection."""
  totalCount: Int!
}

"""A `SchoolStudent` edge in the connection."""
type SchoolStudentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SchoolStudent` at the end of the edge."""
  node: SchoolStudent
}

"""An input for mutations affecting `SchoolStudent`"""
input SchoolStudentInput {
  rowId: Int
  schoolId: Int
  studentId: Int
}

"""Methods to use when ordering `SchoolStudent`."""
enum SchoolStudentOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCHOOL_ID_ASC
  SCHOOL_ID_DESC
  STUDENT_ID_ASC
  STUDENT_ID_DESC
}

"""
Represents an update to a `SchoolStudent`. Fields that are set will be updated.
"""
input SchoolStudentPatch {
  rowId: Int
  schoolId: Int
  studentId: Int
}

"""Relationship connect by node id for schoolStudentsByTheirSchoolId"""
input SchoolStudentsByTheirSchoolIdConnectByNodeIdInput {
  """
  The node id input field to connect school_student in the schoolStudentsByTheirSchoolId relationship
  """
  id: ID!
}

"""The SchoolStudent to be created by this mutation."""
input SchoolStudentsByTheirSchoolIdCreateInput {
  rowId: Int
  schoolId: Int
  studentId: Int
}

"""Relationship input type for schoolStudentsByTheirSchoolId"""
input SchoolStudentsByTheirSchoolIdInput {
  """Connect schoolStudentsByTheirSchoolId by node id"""
  connectByNodeId: [SchoolStudentsByTheirSchoolIdConnectByNodeIdInput!]

  """A SchoolStudent created and linked to this object"""
  create: [SchoolStudentsByTheirSchoolIdCreateInput!]
}

"""Relationship connect by node id for schoolStudentsByTheirStudentId"""
input SchoolStudentsByTheirStudentIdConnectByNodeIdInput {
  """
  The node id input field to connect school_student in the schoolStudentsByTheirStudentId relationship
  """
  id: ID!
}

"""The SchoolStudent to be created by this mutation."""
input SchoolStudentsByTheirStudentIdCreateInput {
  rowId: Int
  schoolId: Int
  studentId: Int
}

"""Relationship input type for schoolStudentsByTheirStudentId"""
input SchoolStudentsByTheirStudentIdInput {
  """Connect schoolStudentsByTheirStudentId by node id"""
  connectByNodeId: [SchoolStudentsByTheirStudentIdConnectByNodeIdInput!]

  """A SchoolStudent created and linked to this object"""
  create: [SchoolStudentsByTheirStudentIdCreateInput!]
}

"""All input for the `updateChildById` mutation."""
input UpdateChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
}

"""All input for the `updateChild` mutation."""
input UpdateChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
  rowId: Int!
}

"""The output of our update `Child` mutation."""
type UpdateChildPayload {
  """The `Child` that was updated by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateParentById` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
}

"""All input for the `updateParent` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
  rowId: Int!
}

"""The output of our update `Parent` mutation."""
type UpdateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parent` that was updated by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSchoolById` mutation."""
input UpdateSchoolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `School` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `School` being updated.
  """
  patch: SchoolPatch!
}

"""All input for the `updateSchool` mutation."""
input UpdateSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `School` being updated.
  """
  patch: SchoolPatch!
  rowId: Int!
}

"""The output of our update `School` mutation."""
type UpdateSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `School` that was updated by this mutation."""
  school: School

  """An edge for our `School`. May be used by Relay 1."""
  schoolEdge(
    """The method to use when ordering `School`."""
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""All input for the `updateSchoolStudentById` mutation."""
input UpdateSchoolStudentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SchoolStudent` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SchoolStudent` being updated.
  """
  patch: SchoolStudentPatch!
}

"""All input for the `updateSchoolStudent` mutation."""
input UpdateSchoolStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SchoolStudent` being updated.
  """
  patch: SchoolStudentPatch!
  rowId: Int!
}

"""The output of our update `SchoolStudent` mutation."""
type UpdateSchoolStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SchoolStudent` that was updated by this mutation."""
  schoolStudent: SchoolStudent

  """An edge for our `SchoolStudent`. May be used by Relay 1."""
  schoolStudentEdge(
    """The method to use when ordering `SchoolStudent`."""
    orderBy: [SchoolStudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolStudentEdge
}