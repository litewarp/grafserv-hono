type Child implements Node {
  """Reads a single `Parent` that is related to this `Child`."""
  dadParent: Parent
  dadParentId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Parent` that is related to this `Child`."""
  momParent: Parent
  momParentId: Int
  name: String!
  rowId: Int!
}

"""
A condition to be used against `Child` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """Checks for equality with the object’s `dadParentId` field."""
  dadParentId: Int

  """Checks for equality with the object’s `momParentId` field."""
  momParentId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Child` values."""
type ChildConnection {
  """
  A list of edges which contains the `Child` and cursor to aid in pagination.
  """
  edges: [ChildEdge]!

  """A list of `Child` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Child` you could get from the connection."""
  totalCount: Int!
}

"""Input for the nested mutation of child type"""
input ChildDadParentIdFKeyInput {
  """A parent object that will be connected by its ID"""
  connectById: ParentNodeIdConnect

  """A ParentInput object that will be created and connected to this object"""
  create: ChildDadParentIdFkeyParentCreateInput

  """
  The primary keys and patch data for parent for the far side of the relationship field
  """
  updateById: ParentOnChildForChildDadParentIdNodeIdUpdate
}

"""Input for the nested mutation of parent type"""
input ChildDadParentIdFKeyInverseInput {
  """A child object that will be connected by its ID"""
  connectById: [ChildNodeIdConnect!]

  """A ChildInput object that will be created and connected to this object"""
  create: [ChildDadParentIdFkeyChildCreateInput!]

  """
  The primary keys and patch data for child for the far side of the relationship field
  """
  updateById: [ChildOnParentForChildDadParentIdNodeIdUpdate!]
}

"""The `child` to be created by this mutation."""
input ChildDadParentIdFkeyChildCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

"""The `parent` to be created by this mutation."""
input ChildDadParentIdFkeyParentCreateInput {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String!
  rowId: Int
}

"""A `Child` edge in the connection."""
type ChildEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Child` at the end of the edge."""
  node: Child
}

"""An input for mutations affecting `Child`"""
input ChildInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

"""Input for the nested mutation of child type"""
input ChildMomParentIdFKeyInput {
  """A parent object that will be connected by its ID"""
  connectById: ParentNodeIdConnect

  """A ParentInput object that will be created and connected to this object"""
  create: ChildMomParentIdFkeyParentCreateInput

  """
  The primary keys and patch data for parent for the far side of the relationship field
  """
  updateById: ParentOnChildForChildMomParentIdNodeIdUpdate
}

"""Input for the nested mutation of parent type"""
input ChildMomParentIdFKeyInverseInput {
  """A child object that will be connected by its ID"""
  connectById: [ChildNodeIdConnect!]

  """A ChildInput object that will be created and connected to this object"""
  create: [ChildMomParentIdFkeyChildCreateInput!]

  """
  The primary keys and patch data for child for the far side of the relationship field
  """
  updateById: [ChildOnParentForChildMomParentIdNodeIdUpdate!]
}

"""The `child` to be created by this mutation."""
input ChildMomParentIdFkeyChildCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

"""The `parent` to be created by this mutation."""
input ChildMomParentIdFkeyParentCreateInput {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String!
  rowId: Int
}

"""The globally unique `ID` to be used in the connection."""
input ChildNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `child` to be connected.
  """
  id: ID!
}

"""The globally unique `ID` to be used in the connection."""
input ChildOnParentForChildDadParentIdNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `child` to be updated.
  """
  id: ID!
  patch: UpdateChildOnParentForChildDadParentIdPatch
}

"""The globally unique `ID` to be used in the connection."""
input ChildOnParentForChildMomParentIdNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `child` to be updated.
  """
  id: ID!
  patch: UpdateChildOnParentForChildMomParentIdPatch
}

"""Methods to use when ordering `Child`."""
enum ChildOrderBy {
  DAD_PARENT_ID_ASC
  DAD_PARENT_ID_DESC
  ID_ASC
  ID_DESC
  MOM_PARENT_ID_ASC
  MOM_PARENT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Child`. Fields that are set will be updated.
"""
input ChildPatch {
  dadParentId: Int
  momParentId: Int
  name: String

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

"""All input for the create `Child` mutation."""
input CreateChildInput {
  """The `Child` to be created by this mutation."""
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Child` mutation."""
type CreateChildPayload {
  """The `Child` that was created by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Parent` mutation."""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Parent` to be created by this mutation."""
  parent: ParentInput!
}

"""The output of our create `Parent` mutation."""
type CreateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parent` that was created by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteChildById` mutation."""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteChild` mutation."""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Child` mutation."""
type DeleteChildPayload {
  """The `Child` that was deleted by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteParentById` mutation."""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteParent` mutation."""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Parent` mutation."""
type DeleteParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """The `Parent` that was deleted by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Child`."""
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """Creates a single `Parent`."""
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """Deletes a single `Child` using a unique key."""
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """Deletes a single `Child` using its globally unique id."""
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """Deletes a single `Parent` using a unique key."""
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """Deletes a single `Parent` using its globally unique id."""
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """Updates a single `Child` using a unique key and a patch."""
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """Updates a single `Child` using its globally unique id and a patch."""
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """Updates a single `Parent` using a unique key and a patch."""
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """Updates a single `Parent` using its globally unique id and a patch."""
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  parentName: String!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildDadParentIdAndMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentParentsByChildDadParentIdAndMomParentIdManyToManyConnection!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildDadParentIdAndMomParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]
  ): [Parent!]!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildMomParentIdAndDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentParentsByChildMomParentIdAndDadParentIdManyToManyConnection!

  """Reads and enables pagination through a set of `Parent`."""
  parentsByChildMomParentIdAndDadParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]
  ): [Parent!]!
  rowId: Int!
}

"""
A condition to be used against `Parent` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Parent` values."""
type ParentConnection {
  """
  A list of edges which contains the `Parent` and cursor to aid in pagination.
  """
  edges: [ParentEdge]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection."""
type ParentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""An input for mutations affecting `Parent`"""
input ParentInput {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String!
  rowId: Int
}

"""The globally unique `ID` to be used in the connection."""
input ParentNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `parent` to be connected.
  """
  id: ID!
}

"""The globally unique `ID` to be used in the connection."""
input ParentOnChildForChildDadParentIdNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `parent` to be updated.
  """
  id: ID!
  patch: UpdateParentOnChildForChildDadParentIdPatch
}

"""The globally unique `ID` to be used in the connection."""
input ParentOnChildForChildMomParentIdNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `parent` to be updated.
  """
  id: ID!
  patch: UpdateParentOnChildForChildMomParentIdPatch
}

"""Methods to use when ordering `Parent`."""
enum ParentOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Parent` values, with data from `Child`."""
type ParentParentsByChildDadParentIdAndMomParentIdManyToManyConnection {
  """
  A list of edges which contains the `Parent`, info from the `Child`, and the cursor to aid in pagination.
  """
  edges: [ParentParentsByChildDadParentIdAndMomParentIdManyToManyEdge!]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection, with data from `Child`."""
type ParentParentsByChildDadParentIdAndMomParentIdManyToManyEdge {
  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByMomParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]
  ): [Child!]!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""A connection to a list of `Parent` values, with data from `Child`."""
type ParentParentsByChildMomParentIdAndDadParentIdManyToManyConnection {
  """
  A list of edges which contains the `Parent`, info from the `Child`, and the cursor to aid in pagination.
  """
  edges: [ParentParentsByChildMomParentIdAndDadParentIdManyToManyEdge!]!

  """A list of `Parent` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parent` you could get from the connection."""
  totalCount: Int!
}

"""A `Parent` edge in the connection, with data from `Child`."""
type ParentParentsByChildMomParentIdAndDadParentIdManyToManyEdge {
  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """Reads and enables pagination through a set of `Child`."""
  childrenByDadParentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]
  ): [Child!]!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parent` at the end of the edge."""
  node: Parent
}

"""
Represents an update to a `Parent`. Fields that are set will be updated.
"""
input ParentPatch {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String
  rowId: Int
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Get a single `Child`."""
  child(rowId: Int!): Child

  """Reads a single `Child` using its globally unique `ID`."""
  childById(
    """The globally unique `ID` to be used in selecting a single `Child`."""
    id: ID!
  ): Child

  """Reads and enables pagination through a set of `Child`."""
  children(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Get a single `Parent`."""
  parent(rowId: Int!): Parent

  """Reads a single `Parent` using its globally unique `ID`."""
  parentById(
    """The globally unique `ID` to be used in selecting a single `Parent`."""
    id: ID!
  ): Parent

  """Reads and enables pagination through a set of `Parent`."""
  parents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the `updateChildById` mutation."""
input UpdateChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
}

"""All input for the `updateChild` mutation."""
input UpdateChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
  rowId: Int!
}

input UpdateChildOnParentForChildDadParentIdPatch {
  dadParentId: Int
  momParentId: Int
  name: String

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

input UpdateChildOnParentForChildMomParentIdPatch {
  dadParentId: Int
  momParentId: Int
  name: String

  """Nested mutation for parent"""
  parentToDadParentId: ChildDadParentIdFKeyInput

  """Nested mutation for parent"""
  parentToMomParentId: ChildMomParentIdFKeyInput
  rowId: Int
}

"""The output of our update `Child` mutation."""
type UpdateChildPayload {
  """The `Child` that was updated by this mutation."""
  child: Child

  """An edge for our `Child`. May be used by Relay 1."""
  childEdge(
    """The method to use when ordering `Child`."""
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateParentById` mutation."""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
}

"""All input for the `updateParent` mutation."""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
  rowId: Int!
}

input UpdateParentOnChildForChildDadParentIdPatch {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String
  rowId: Int
}

input UpdateParentOnChildForChildMomParentIdPatch {
  """Nested mutation for child"""
  childrenToIdUsingDadParentId: ChildDadParentIdFKeyInverseInput

  """Nested mutation for child"""
  childrenToIdUsingMomParentId: ChildMomParentIdFKeyInverseInput
  parentName: String
  rowId: Int
}

"""The output of our update `Parent` mutation."""
type UpdateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parent` that was updated by this mutation."""
  parent: Parent

  """An edge for our `Parent`. May be used by Relay 1."""
  parentEdge(
    """The method to use when ordering `Parent`."""
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}